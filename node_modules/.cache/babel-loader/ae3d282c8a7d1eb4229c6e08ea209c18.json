{"ast":null,"code":"/*\nimport json from './importexample.json'\n      export default{\n          data(){\n              return{\n                  myJson: json\n              }\n          }\n      }\n*/\nimport json from './importexample.json';\nexport default {\n  name: \"NotesBoard\",\n  data: () => ({\n    hideForm: false,\n    currentSort: 'title',\n    currentSortDir: 'asc',\n    id: 0,\n    title: \"\",\n    content: \"\",\n    status: \"\",\n    notesTbl: [],\n    hideDelFormDiv: false,\n    completed: 0,\n    NCompleted: 0,\n    jsonData: json.data\n  }),\n  created: function () {\n    for (var h in this.jsonData) {\n      alert(this.jsonData[h].id);\n      this.notesTbl.push({\n        id: this.jsonData[h].id,\n        title: this.jsonData[h].title,\n        status: this.jsonData[h].status,\n        content: this.jsonData[h].content,\n        DelNotes: false\n      });\n      this.id = this.jsonData[h].id;\n    }\n  },\n  computed: {\n    sortedNotes: function () {\n      return this.notesTbl.slice().sort((a, b) => {\n        let modifier = 1;\n        if (this.currentSortDir === 'desc') modifier = -1;\n        if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;\n        if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;\n        return 0;\n      });\n    }\n  },\n  methods: {\n    sort: function (s) {\n      if (s === this.currentSort) {\n        this.currentSortDir = this.currentSortDir === 'asc' ? 'desc' : 'asc';\n      }\n\n      this.currentSort = s;\n    },\n\n    SubmitNote() {\n      if (this.title == \"\" && this.content == \"\") {\n        alert(\"both fields shouldn’t be empty\");\n        return false;\n      }\n\n      if (this.status == \"Completed\") this.completed++;else this.NCompleted++;\n      this.id++;\n      this.notesTbl.push({\n        id: this.id,\n        title: this.title,\n        status: this.status,\n        content: this.content,\n        DelNotes: false\n      });\n      this.clearForm();\n    },\n\n    onAdd() {\n      this.hideForm = true;\n    },\n\n    DelQuestion() {\n      this.hideDelFormDiv = true;\n    },\n\n    clearForm() {\n      this.title = \"\";\n      this.content = \"\";\n      this.status = \"\";\n      this.hideForm = false;\n    },\n\n    HideDelForm() {\n      for (var k in this.notesTbl) {\n        this.notesTbl[k].DelNotes = false;\n      }\n\n      this.hideDelFormDiv = false;\n    },\n\n    DelNote() {\n      for (var k in this.notesTbl) {\n        if (this.notesTbl[k].DelNotes == true) {\n          if (this.notesTbl[k].status == \"Completed\") this.completed--;else this.NCompleted--;\n          this.notesTbl.splice(k, 1);\n        }\n      }\n\n      this.HideDelForm();\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["json","name","data","hideForm","currentSort","currentSortDir","id","title","content","status","notesTbl","hideDelFormDiv","completed","NCompleted","jsonData","created","h","alert","push","DelNotes","computed","sortedNotes","slice","sort","a","b","modifier","methods","s","SubmitNote","clearForm","onAdd","DelQuestion","HideDelForm","k","DelNote","splice"],"sourceRoot":"","sources":["C:\\Users\\Käyttäjä\\notes\\src\\components\\Notesboard.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    \n    <form>\n\n    <table class=\"totTable\">\n      <thead>\n        <tr>\n          <th>Total</th>\n          <th>Completed</th>\n          <th>Not completed</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{{ sortedNotes.length }}</td>\n          <td>{{ this.completed }}</td>\n          <td>{{ this.NCompleted }}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <div class=\"resultDiv\">\n    <table class=\"resultTable\">\n      <thead style=\"background: gray; color: white;\">\n        <tr>\n          <th @click=\"sort('id')\">Id</th>\n          <th @click=\"sort('title')\">Title</th>\n          <th @click=\"sort('content')\">Content</th>\n          <th @click=\"sort('status')\">Status</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(fieldVal, i) in sortedNotes\" :key=\"i\">\n          <td><input type=\"checkbox\" v-model=\"fieldVal.DelNotes\" @click=\"DelQuestion()\">{{ fieldVal.id }}</td>\n          <td>{{ fieldVal.title }}</td>\n          <td>{{ fieldVal.content }}</td>\n          <td>{{ fieldVal.status }}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <div style=\"display:flex; justify-content:flex-end; width:100%; padding:0;\">\n    <button type=\"button\" @click=\"onAdd\" class=\"insButton\" id=\"onAdd\">\n        Add\n      </button>\n    </div>\n    </div>\n\n    <div v-show=\"hideForm\" class=\"addNote\">\n    <h1 class=\"noteHeader\">Add Note</h1>\n    \n      <div class=\"form-group\">\n        <input\n          type=\"text\"\n          placeholder=\"Add note\"\n          v-model=\"title\"\n          class=\"form-control\"\n          id=\"title\"\n        />\n        <br>\n        <input\n          type=\"text\"\n          placeholder=\"Lorem ipsum\"\n          v-model=\"content\"\n          class=\"form-control\"\n          id=\"content\"\n        />\n        <br>\n\n        <input\n          type=\"text\"\n          placeholder=\"New\"\n          v-model=\"status\"\n          class=\"form-control\"\n          id=\"status\"\n        />\n\n      \n      </div>\n      <button type=\"button\" @click=\"SubmitNote\" class=\"insButton\" id=\"Save\" >\n        Save\n      </button>\n\n      <button type=\"button\" @click=\"clearForm\" class=\"clearButton\" id=\"clearButton\">\n        Cancel\n      </button>\n    \n    </div>\n\n  <div v-show=\"hideDelFormDiv\" class=\"delNoteQuest\">\n  <h1>Do you want to delete this note?\n\n  <button type=\"button\" @click=\"HideDelForm\" class=\"undoDel\" id=\"undoDel\" >\n    No\n  </button>\n\n  <button type=\"button\" @click=\"DelNote\" class=\"delNote\" id=\"delNote\">\n    Yes\n  </button>\n  </h1>\n\n  </div>\n  \n\n  </form>\n\n  </div>\n</template>\n\n<script>\n/*\nimport json from './importexample.json'\n      export default{\n          data(){\n              return{\n                  myJson: json\n              }\n          }\n      }\n*/\nimport json from './importexample.json'\n\nexport default {\n  name: \"NotesBoard\",\n  data: () => ({ hideForm: false, currentSort:'title',currentSortDir:'asc', \n                  id: 0, title: \"\", content: \"\", status: \"\", notesTbl: [], \n                  hideDelFormDiv: false, completed:0, NCompleted:0, jsonData:json.data }),\n  \n  created:function(){\n    for(var h in this.jsonData)\n    {\n      alert(this.jsonData[h].id);\n      this.notesTbl.push({ id: this.jsonData[h].id, title: this.jsonData[h].title, \n                            status: this.jsonData[h].status, \n                            content: this.jsonData[h].content, DelNotes: false });\n      this.id = this.jsonData[h].id;\n    }\n  },\n  \n  computed: {\n    sortedNotes: function() {\n    return this.notesTbl.slice().sort((a,b) => {\n      let modifier = 1;\n      if(this.currentSortDir === 'desc') modifier = -1;\n      if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier;\n      if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier;\n      return 0;\n    });\n    },\n  },\n\n  methods: {\n    sort:function(s) {\n      if(s === this.currentSort) {\n        this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc';\n      }\n      this.currentSort = s;\n    },\n    SubmitNote() {\n      if(this.title == \"\" && this.content == \"\")\n      {\n        alert(\"both fields shouldn’t be empty\");\n        return false;\n      }\n\n      if(this.status == \"Completed\")\n        this.completed++;\n      else\n        this.NCompleted++;\n\n      this.id++;\n      this.notesTbl.push({ id: this.id, title: this.title, status: this.status, \n                            content: this.content, DelNotes: false });\n      this.clearForm();\n    },\n    onAdd() {\n      this.hideForm = true;\n    },\n    DelQuestion() {\n      this.hideDelFormDiv = true;\n    },\n    clearForm() {\n      this.title = \"\";\n      this.content = \"\";\n      this.status = \"\";\n      this.hideForm = false;\n    },\n    HideDelForm() {\n      for(var k in this.notesTbl)\n      {\n        this.notesTbl[k].DelNotes = false;\n      }\n      this.hideDelFormDiv = false;\n    },\n    DelNote(){\n      for(var k in this.notesTbl)\n      {\n        \n        if(this.notesTbl[k].DelNotes == true)\n        {\n          \n          if(this.notesTbl[k].status == \"Completed\")\n            this.completed--;\n          else\n            this.NCompleted--;\n          \n          this.notesTbl.splice(k,1);\n        }\n      }\n\n      this.HideDelForm();\n    }\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module"}